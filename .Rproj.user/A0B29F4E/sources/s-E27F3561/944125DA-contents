---
title: "WGCNA for Genes"
author: "Annie Bryant"
date: "4/20/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(fastDummies)
library(broom)
library(tidyr)
library(kableExtra)
library(readxl)
library(forcats)
library(data.table)
library(FactoMineR)
library(factoextra)
library(missMDA)
library(ggpubr)
library(ggraph)
library(igraph)
library(WGCNA)
library(dendextend)
library(colormap)
library(ggrepel)
load("RData/qPCR_Olink.RData")

qPCR <- qPCR %>%
  mutate_at(c("ABC_A", "ABC_B", "ABC_C"), function(x) str_replace(x, "0|1", "1")) %>%
  filter(ABC_B %in% c("1", "3"))
```


############################################################################# B3 only

```{r}
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE)

foldchange.data <- qPCR %>%
  filter(ABC_B == "3") %>%
  select(ADRC_Number, Gene, Fold_Change) %>%
  pivot_wider(id_cols=ADRC_Number, names_from=Gene, values_from=Fold_Change) %>%
  remove_rownames() %>%
  column_to_rownames(var="ADRC_Number")
```

Make sure no samples are missing too many values:
```{r}
gsg = goodSamplesGenes(foldchange.data, verbose = 3);
gsg$allOK
```

Cluster samples to see if there are any major outliers:

```{r}
sampleTree = hclust(dist(foldchange.data), method = "average")
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
     cex.axis = 1.5, cex.main = 2)

```

Load subject clinical info:
```{r}
trait.data <- qPCR %>%
  filter(ABC_B=="3") %>%
  left_join(., cerebrovascular) %>%
  select(ADRC_Number, ABC_A, ABC_C, Age_at_Death, APOE, Sex, Cerebrovascular) %>%
  distinct() %>%
  mutate_at(c("ABC_A", "ABC_C"), function(x) as.numeric(x))

trait.data$Sex <- as.numeric(factor(trait.data$Sex))
trait.data$APOE <- as.numeric(factor(trait.data$APOE))
trait.data$Cerebrovascular <- as.numeric(factor(trait.data$Cerebrovascular))

trait.data <- trait.data %>%
  remove_rownames() %>%
  column_to_rownames(var="ADRC_Number")

collectGarbage()
```


So we now have the gene expression data in foldchange.data and the corresponding clinical info in trait.data. We can visualize how the clinical traits relate to the sample dendrogram: 

```{r}
# Re-cluster samples
sampleTree2 = hclust(dist(trait.data), method = "average")
# Convert traits to a color representation: white means low, red means high, grey means missing entry
traitColors = numbers2colors(trait.data, signed = FALSE);
# Plot the sample dendrogram and the colors underneath.
plotDendroAndColors(sampleTree2, traitColors,
                    groupLabels = names(trait.data),
                    main = "Sample dendrogram and trait heatmap")

```



The function pickSoftThreshold that performs the analysis of network topology and aids the
user in choosing a proper soft-thresholding power. We pick a soft thresholding power (beta) to which co-expression similarity is raised to calculate adjacency

```{r}
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))

# Call the network topology analysis function
sft = pickSoftThreshold(foldchange.data, powerVector = powers, verbose = 5)


# Power estimate = 6

# Plot the results:
#png("Figures/WGCNA/Scale_Ind.png", res=300, width=6, height=4, units="in")
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
#dev.off()

```
Use 10 as soft power threshold

```{r}
net = blockwiseModules(foldchange.data, 
                       
                       # soft power threshold 10
                       power = 10,
                       
                       # Minimum module size is 5
                       TOMType = "unsigned", minModuleSize = 4,
                       reassignThreshold = 0, mergeCutHeight = 0.07,
                       numericLabels = TRUE, pamRespectsDendro = FALSE,
                       verbose = 3)
```

```{r}
table(net$colors)
```


The hierarchical clustering dendrogram (tree) used for the module identification is returned in net\$dendrograms[[1]]; #$.

The dendrogram can be displayed together with the color assignment using the following code
```{r}
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)

# Plot the dendrogram and the module colors underneath
#png("Figures/WGCNA/Cluster_Dend.png", width=6, height=4, units="in", res=300)
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
                    "Module colors",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)
#dev.off()
```

Then save the module assignment and module eigengene information necessary for subsequent analysis.
```{r}
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs;
geneTree = net$dendrograms[[1]]
```

We can test if there are modules associated with clinical traits. Since we already have a summary profile (eigengene) for each module, we simply correlate eigengenes with external traits and look for the most significant associations:
```{r}
# Define numbers of genes and samples
nGenes = ncol(foldchange.data);
nSamples = nrow(foldchange.data);

# Recalculate MEs with color labels
MEs0 = moduleEigengenes(foldchange.data, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, trait.data, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)

```

```{r}
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
                   signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
#png("Figures/WGCNA/Mod_Trait_Rel.png", res=300, width=7, height=4, units="in")
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(trait.data),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = greenWhiteRed(50),
               textMatrix = textMatrix,
               cex.text = 0.9,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))
#dev.off()
```


We quantify associations of individual genes with our trait of interest (weight) by defining Gene Significance GS as (the absolute value of) the correlation between the gene and the trait. For each module, we also define a quantitative measure of module membership MM as the correlation of the module eigengene and the gene expression profile. This allows us to quantify the similarity of all genes on the array to every module.

Extract the WGCNA results for module membership and trait significance. The final dataframe, wgcna_results, stores all that info.

```{r}
geneModuleMembership = as.data.frame(cor(foldchange.data, MEs, use = "p"));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));

trait.sigs <- data.frame(Gene = colnames(foldchange.data))

for (trait in colnames(trait.data)) {
  trait.df <- as.data.frame(trait.data %>%
                              select(trait))
  names(trait.df) <- trait
  
  
  geneTraitSignificance <- as.data.frame(cor(foldchange.data, trait.df, use="p"))
  GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))
  
  
  names(geneTraitSignificance) <- sprintf("%s_corr", trait)
  names(GSPvalue) <- sprintf("%s_p", trait)
  geneTraitSignificance <- abs(geneTraitSignificance)
  
  trait.sigs <- do.call(cbind, list(trait.sigs, geneTraitSignificance, GSPvalue))
}

geneModuleMembership = as.data.frame(cor(foldchange.data, MEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
geneModuleMembership$Gene <- colnames(foldchange.data)
geneModuleMembership$Primary_Module <- moduleColors

wgcna_results <- left_join(trait.sigs, geneModuleMembership) %>%
  rename("blue" = "MEblue",
         "turquoise" = "MEturquoise",
         "grey" = "MEgrey") %>%
  mutate_at(c("blue", "turquoise", "grey"), function(x) abs(x))


```

Plot results for each module:
```{r}
plot_module_results <- function(module) {
  trait.labs <- c("ABC-Amyloid",
                  "ABC-CERAD",
                  "Age at Death",
                  "ApoE Genotype",
                  "Cerebrovascular Pathology",
                  "Sex")
  names(trait.labs) <- c("ABC_A", "ABC_C",
                         "Age_at_Death",
                         "APOE", "Cerebrovascular",
                         "Sex")
  
  p <- wgcna_results %>%
    left_join(., gene_functions) %>%
    pivot_longer(c("ABC_A_corr",
                   "ABC_C_corr",
                   "Age_at_Death_corr",
                   "APOE_corr",
                   "Sex_corr",
                   "Cerebrovascular_corr"), names_to="Trait", values_to="Trait_Corr") %>%
    mutate(Trait = str_replace(Trait, "_corr", "")) %>%
    select(Gene, module, Primary_Module, Function, Trait, Trait_Corr) %>%
    filter(Primary_Module==module) %>%
    ggplot(data=., mapping=aes_string(x=module, y="Trait_Corr")) +
    geom_point() +
    facet_wrap(Trait ~ ., scales="free", labeller=labeller(Trait = trait.labs)) +
    stat_smooth(method = "lm", se=F, geom="line", color="black") +
    geom_point(aes(color=Function)) +
    geom_text_repel(aes(color=Function, label=Gene), show.legend = F,
                    size=3) +
    theme_minimal() +
    xlab(sprintf("Correlation with %s module", module)) +
    ggtitle(sprintf("%s Module Association with Sample Traits", module)) +
    labs(color="") +
    ylab("Correlation with Trait") +
    guides(color=guide_legend(nrow=2, override.aes=list(size=4))) +
    theme(plot.title = element_text(size=14, face="bold", hjust=0.5),
          strip.text.x = element_text(size=12, face="bold", margin=margin(0,0,20,0)),
          legend.position="bottom",
          legend.text = element_text(size=12))
  
  print(p)
  ggsave(sprintf("Figures/WGCNA/%s_Module_Traits.png", module), dpi=300, width=10, height=7, units="in")
}
```
```{r}
plot_module_results("turquoise")
plot_module_results("blue")
```


```{r}
adjacency = adjacency(foldchange.data, power=10, type="unsigned")
heatmap(adjacency, labRow=FALSE, labCol=FALSE)
```

```{r}
adjacency[adjacency < 0] = 0
adjacency[adjacency > 1] = 1
TOM = TOMsimilarity(adjacency, TOMType="unsigned")
```

```{r}
adj <- TOM
adj[adj > 0.1] = 1
adj[adj != 1] = 0
network <- graph.adjacency(adj)
network <- simplify(network)  # removes self-loops
results <- blockwiseModules(foldchange.data, power=10, TOMType="unsigned", networkType="unsigned", minModuleSize = 4, mergeCutHeight=0.07)
V(network)$color <- results$colors
par(mar=c(0,0,0,0))
# remove unconnected nodes
network <- delete.vertices(network, degree(network)==0)
plot(network, layout=layout.fruchterman.reingold(network), edge.arrow.size = 0.2)
```




##################### Module-based correlation heatmaps

```{r}
wgcna_modules <- wgcna_results %>%
  select(Gene, Primary_Module)
```

```{r}
load("RData/Gene_Corr.RData")
```


```{r}
gene.corr.results.2 <- gene.corr.results %>%
  rename("Gene2" = "Gene1",
         "Gene1" = "Gene2")

gene.corr.results <- plyr::rbind.fill(gene.corr.results, gene.corr.results.2)

mod.levs <- c("turquoise", "blue", "brown", "grey")
mod.levs.rev <- rev(mod.levs)

```


```{r}
my_palette <- colorRampPalette(c("dodgerblue2", "white", "white", "firebrick2"))
```


```{r}
gene.corr.results %>%
  left_join(., wgcna_modules, by=c("Gene1" = "Gene")) %>%
  rename("Mod1" = "Primary_Module") %>%
  mutate(Mod1 = factor(Mod1, levels=mod.levs)) %>%
  left_join(., wgcna_modules, by=c("Gene2" = "Gene")) %>%
  rename("Mod2" = "Primary_Module") %>%
  mutate(Mod2 = factor(Mod2, levels=mod.levs.rev)) %>%
  mutate_at(c("Gene1", "Gene2"), function(x) paste(x, "   ")) %>%
  ggplot(., mapping=aes(x=Gene1, y=Gene2)) +
  geom_tile(mapping=aes(fill=Pearson_Coef)) +
  labs(fill="Pearson Coefficient") +
  theme_minimal() +
  facet_grid(Mod2 ~ Mod1, scales="free", space="free", switch="both") +
  theme(strip.text = element_blank(),
        axis.title=element_blank(),
        axis.text.y = element_text(size=11),
        axis.text.x = element_text(angle=90, size=11),
        panel.border = element_blank(), 
        panel.grid = element_blank(),
        legend.position="bottom") +
  scale_fill_gradient2(low="#4E7DB8", mid="white", high="#D84330",
                       limits=c(-1,1))
# scale_fill_continuous_divergingx(palette="RdBu", rev=T, mid=0, p1=1.5, p2=1.5, p3=1.5,
#                                  l1 = 60, l3 = 50, c1 = 100, c3=100,
#                                  limits=c(-1, 1))
ggsave("Figures/Gene_Correlations/WGCNA_Gene_Corr_Heatmap.png", dpi=300, width=8, height=8.5, units="in")
```


```{r}
wgcna_modules %>%
  group_by(Primary_Module) %>%
  mutate(Module_N = n()) %>%
  ungroup() %>%
  left_join(., gene_functions) %>%
  group_by(Primary_Module, Function) %>%
  summarise(Module_Proportion = mean(n()/Module_N) * 100)
```

```{r}
wgcna_modules %>%
  mutate(Primary_Module = factor(Primary_Module, levels=c("blue",
                                                          "turquoise",
                                                          "brown",
                                                          "grey"))) %>%
  group_by(Primary_Module) %>%
  mutate(Module_N = n()) %>%
  ungroup() %>%
  left_join(., gene_functions) %>%
  mutate(Function = case_when(
    Function == "Senescence Associated" ~ "Senescence-Associated",
    Function == "Endothelial Cell Marker" ~ "Endothelial Marker",
    Function == "Cell Adhesion Molecules" ~ "Cell Adhesion",
    Function == "Junction Proteins" ~ "Junction Marker",
    Function == "VEGF/Notch Pathways" ~ "VEGF/Notch Pathways",
    Function == "Plasmin/APOE Pathways" ~ "Plasmin/APOE Pathways",
    Function == "Other (Astrocyte Marker)" ~ "Astrocyte Marker",
    Function == "Other (Smooth Muscle Cell Marker)" ~ "Smooth Muscle Cell Marker",
    Function == "Other (Microglia Marker)" ~ "Microglia Marker",
    T ~ as.character(Function)
  )) %>%
  mutate(Function = factor(Function, levels=c(
    "Senescence-Associated",
    "Endothelial Marker",
    "Cell Adhesion",
    "Junction Marker",
    "VEGF/Notch Pathways",
    "Cell Stress",
    "Plasmin/APOE Pathways",
    "Astrocyte Marker",
    "Smooth Muscle Cell Marker",
    "Microglia Marker"
  ))) %>%
  ungroup() %>%
  mutate(Primary_Module = factor(Primary_Module, levels=c("blue",
                                                          "turquoise",
                                                          "brown",
                                                          "grey"))) %>%
  group_by(Primary_Module, Function, Gene) %>%
  summarise(Module_Proportion = mean(n()/Module_N) * 100) %>%
  ggplot(data=., mapping=aes(x=0, y=Module_Proportion, fill=Function)) +
  facet_wrap(Primary_Module ~ ., scales="free", ncol=4) +
  geom_bar(stat="identity") +
  theme_minimal() +
  geom_text(aes(label=Gene), position=position_stack(vjust=0.5)) +
  labs(fill="") +
  theme(axis.text = element_blank(),
        plot.title = element_text(hjust=0.5, face="bold", 14),
        axis.title = element_blank(),
        panel.grid = element_blank(),
        legend.text = element_text(size=14),
        legend.position="bottom",
        strip.text = element_text(size=14, face="bold")) +
  guides(fill=guide_legend(nrow=5, byrow = T)) 
ggsave("Figures/WGCNA/Function_Group_Comp.png", dpi=300, width=5, height=7, units="in")
```


```{r}
wgcna_modules %>%
  left_join(., gene_functions) %>%
  mutate(Function = case_when(
    Function == "Senescence Associated" ~ "Senescence-\nAssociated",
    Function == "Endothelial Cell Marker" ~ "Endothelial\nMarker",
    Function == "Cell Adhesion Molecules" ~ "Cell\nAdhesion",
    Function == "Junction Proteins" ~ "Junction\nMarker",
    Function == "VEGF/Notch Pathways" ~ "VEGF/Notch\nPathways",
    Function == "Plasmin/APOE Pathways" ~ "Plasmin/APOE\nPathways",
    Function == "Other (Astrocyte Marker)" ~ "Astrocyte\nMarker",
    Function == "Other (Smooth Muscle Cell Marker)" ~ "Smooth Muscle\nCell Marker",
    Function == "Other (Microglia Marker)" ~ "Microglia\nMarker",
    T ~ as.character(Function)
  )) %>%
  mutate(Function = factor(Function, levels=c(
    "Senescence-\nAssociated",
    "Endothelial\nMarker",
    "Cell\nAdhesion",
    "Junction\nMarker",
    "VEGF/Notch\nPathways",
    "Cell Stress",
    "Plasmin/APOE\nPathways",
    "Astrocyte\nMarker",
    "Smooth Muscle\nCell Marker",
    "Microglia\nMarker"
  ))) %>%
  group_by(Function) %>%
  mutate(Function_N = n()) %>%
  ungroup() %>%
  group_by(Function, Primary_Module) %>%
  summarise(Module_Proportion = mean(n()/Function_N) * 100) %>%
  ggplot(data=., mapping=aes(x=0, y=Module_Proportion, fill=Primary_Module)) +
  geom_bar(stat="identity") +
  coord_flip() +
  facet_wrap(Function ~ ., scales="free", ncol=1, strip.position = "left") +
  theme_minimal() +
  labs(fill="WGCNA Module") +
  ggtitle("Function Group WGCNA Distribution") +
  scale_fill_manual(values=c("royalblue4", "brown", "gray46", "turquoise3")) +
  theme(axis.text = element_blank(),
        plot.title = element_text(hjust=0.5, face="bold", 14),
        axis.title = element_blank(),
        panel.grid = element_blank(),
        legend.text = element_text(size=12),
        legend.position="bottom",
        strip.text.y.left = element_text(angle=0, size=12)) +
  guides(fill=guide_legend(nrow=2, byrow = T))
ggsave("Figures/WGCNA/Function_Group_Dist.png", dpi=300, width=6, height=8.5, units="in")
```