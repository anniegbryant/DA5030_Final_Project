library(shiny)
library(DT)
library(tidyverse)
library(broom)
library(tidyr)
library(data.table)
library(ggpubr)
library(ggraph)
library(igraph)
library(dendextend)
library(shinyWidgets)
library(colorspace)
library(colormap)
library(readxl)
library(ggrepel)
library(RColorBrewer)
library(shinydashboard)
library(ggseg)
library(edgebundleR)

library(shiny)
library(semantic.dashboard)
library(ggplot2)
library(plotly)
library(DT)
library(flexdashboard)
library(shinyjs)
data(cars)

load("shiny_data.RData")

curve_to_roi <- read.csv("curve_to_roi.csv")
colnames(curve_to_roi)[1] <- "curveNumber"

edges <- read.csv("tau_roi_nodes.csv") %>% distinct()
rois <- edges %>% filter(!(to %in% c("Cingulate", "Frontal", "Insula",
                                     "Occipital", "Parietal", "Temporal")))


ui <- fluidPage(
  # code to reset plotlys event_data("plotly_click", source="A") to NULL -> executed upon action button click
  # note that "A" needs to be replaced with plotly source string if used
  extendShinyjs(text = "shinyjs.resetClick = function() { Shiny.onInputChange('plotly_click-mybrain', 'null'); }"),
  actionButton("reset", "Reset plotly click value"),
  plotlyOutput("brain"),
  verbatimTextOutput("clickevent")
)

# mtcars[mtcars$key %in% click_data$key, "col"] <- "red"
server <- function(input, output) {
  
  
  output$brain <- renderPlotly({
    click_data <<- event_data("plotly_click", source = "mybrain")
    
    if (is.null(click_data)) {
      p.brain <- data.frame(curve_to_roi) %>%
        rename("region"="ROI") %>%
        ggseg(atlas="dk", color="white", mapping=aes(fill=region, label=region)) +
        theme_void() +
        theme(legend.position="none")
    }
    else {
      my.roi <- as.data.frame(event_data("plotly_click", source = "mybrain")) %>%
        left_join(., curve_to_roi) %>% pull(ROI)
      
      p.brain <- data.frame(curve_to_roi) %>%
        rename("region"="ROI") %>%
        mutate(val=ifelse(region==my.roi, 1, 0)) %>%
        ggseg(atlas="dk", color="white", mapping=aes(fill=val, label=region)) +
        theme_void() +
        theme(legend.position="none") 
    }
    
    ggplotly(p.brain, dynamicTicks = T, tooltip=c("label"),
             source="mybrain")
  })
  
  output$clickevent <- renderPrint({
    click_data <<- event_data("plotly_click", source = "mybrain")
    if (is.null(click_data)) return("nothing selected")
    
    click_data
  })
  
  observeEvent(input$reset, {
    js$resetClick()
  })
}
shinyApp(ui, server)


