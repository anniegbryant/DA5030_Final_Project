

library(shiny)
library(DT)
library(tidyverse)
library(broom)
library(tidyr)
library(data.table)
library(ggpubr)
library(ggraph)
library(igraph)
library(dendextend)
library(shinyWidgets)
library(colorspace)
library(colormap)
library(readxl)
library(ggrepel)
library(RColorBrewer)
load("../RData/qPCR_Olink.RData")
load("../RData/Gene_Corr.RData")
edges <- read_excel("../RData/Gene_Function_Edges.xlsx")


#create a vertices data.frame. One line per object of our hierarchy
vertices = data.frame(name = unique(c(as.character(edges$from), as.character(edges$to))))
vertices$group <- edges$from[match(vertices$name, edges$to)]

#Create a graph object
mygraph <- graph_from_data_frame( edges, vertices=vertices )




#Define UI for miles per gallon app ----
ui <- fluidPage(
    
    #App title ----
    titlePanel("Gene Fold Changes in B3 Subjects"),
    
    #Sidebar layout with input and output definitions ----
    sidebarLayout(
        
        #Sidebar panel for inputs ----
        # sidebarPanel(
        #     selectInput("Gene", "Gene:",
        #                 unique(qPCR$Gene),
        #                 selected="ACTA2",
        #                 multiple=T),
        
        sidebarPanel(
            selectInput("pval", "p-value:",
                        c("0.001", "0.01", "0.05"),
                        selected="0.05"),
            
            sliderInput("mincor", "Minimum correlation magnitude:",
                        min=0, max=1, value=0),
            
            pickerInput("Gene", "Gene:",
                        choices=unique(qPCR$Gene),
                        options=list(`actions-box`=T),
                        multiple=T),
            
        
            
            # checkboxGroupInput("Gene", "Gene:",
            #                    choices = unique(qPCR$Gene)),
            
            
            
            
        ),
        
        #Main panel for displaying outputs ----
        mainPanel(
            #Output: Plot of the requested variable against mpg ----
            #DT::dataTableOutput("mytable")
            plotOutput("outputPlot",
                       height=525,
                       width=650)
        )
    )
)


#Define server logic to plot various variables against mpg ----
server <- function(input, output) {
    
    
    output$outputPlot <- renderPlot({
        connect <- gene.corr.results %>%
            filter(Gene2 %in% input$Gene | Gene1 %in% input$Gene,
                   p.value < input$pval,
                   abs(Pearson_Coef) > input$mincor) %>%
            rename("from" = "Gene1",
                   "to" = "Gene2",
                   "value" = "Pearson_Coef") %>%
            mutate(logp = -1*log(p.value, 10)) %>%
            arrange(from, to)
        
        p <- ggraph(mygraph, layout = 'dendrogram', circular = TRUE) + 
            theme_void()
        
        if (nrow(connect!=0)) {
            
            
            from <- match(connect$from, vertices$name)
            to <- match(connect$to, vertices$name)
            
            p <- p +  geom_conn_bundle(data = get_con(from = from, to = to, 
                                                      pval=connect$logp,
                                                      corr=connect$value), 
                                       tension=0.3, alpha=0.6, width=2,
                                       aes(color=corr))  +
                scale_edge_color_gradient2(low="dodgerblue3", mid="white", 
                                           high="firebrick3",
                                           limits=c(-1, 1)) +
                labs(edge_width="-log10\np.value",
                     edge_color="Pearson\nCorrelation")
            
            p <- p + geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group),   size=3) +
                scale_colour_manual(values= rep( brewer.pal(8,"Paired") , 30),
                                    guide=F) +
                geom_node_text(aes(x = x*1.2, y=y*1.2, filter = leaf, label=name,
                                   color=group))+ 
                theme_void() + 
                ggtitle("Significant Gene Correlations in\nBA9 Capillaries in B3 Subjects") +
                theme(plot.title=element_text(size=14, face="bold", hjust=0.5))
            
            
            
        }
        
        else {
            p <- p + geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group),   size=3) +
                scale_colour_manual(values= rep( brewer.pal(8,"Paired") , 30),
                                    guide=F) +
                geom_node_text(aes(x = x*1.2, y=y*1.2, filter = leaf, label=name,
                                   color=group))+ 
                theme_void() + 
                ggtitle("Significant Gene Correlations in\nBA9 Capillaries in B3 Subjects") +
                theme(plot.title=element_text(size=14, face="bold", hjust=0.5))
        }
        
        
        p
        
        
        
    })
    
}

shinyApp(ui, server)